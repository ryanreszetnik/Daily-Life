service: task-org

frameworkVersion: "2"

custom:
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    DOMAIN_SUFFIX: task-org
  lambdaHashingVersion: 20201221
  profile: serverlessUser
  stage: dev
  region: ca-central-1
  httpApi:
    cors: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - lambda:*
      Resource: "*"

functions:
  app-load:
    handler: lambdas/endpoints/general/http-app-load.handler
    events:
      - http:
          path: /
          method: GET
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  edit-tasks:
    handler: lambdas/endpoints/tasks/http-update-task.handler
    events:
      - http:
          path: /tasks
          method: PUT
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  edit-courses:
    handler: lambdas/endpoints/tasks/http-update-courses.handler
    events:
      - http:
          path: /courses
          method: PUT
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  edit-events:
    handler: lambdas/endpoints/calendar/http-update-event.handler
    events:
      - http:
          path: /events
          method: PUT
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  edit-links:
    handler: lambdas/endpoints/general/http-update-links.handler
    events:
      - http:
          path: /links
          method: PUT
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  remove-event:
    handler: lambdas/endpoints/calendar/http-remove-event.handler
    events:
      - http:
          path: /events
          method: DELETE
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  postConfirmation:
    handler: lambdas/endpoints/cognito/http-register-account.handler
    events:
      - cognitoUserPool:
          pool: MyUserPool
          trigger: PostConfirmation

resources:
  Resources:
    CognitoUserPoolMyUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: task-organizer-user-pool-${opt:stage, self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:custom.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPoolMyUserPool
        GenerateSecret: false
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoUserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - Fn::GetAtt:
              - CognitoUserPoolMyUserPool
              - Arn
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: task-org-users
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: sub
            AttributeType: S
        KeySchema:
          - AttributeName: sub
            KeyType: HASH
    eventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: task-org-events
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    tasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: task-org-tasks
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
